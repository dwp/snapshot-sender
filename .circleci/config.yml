# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

orbs:
  snyk: snyk/snyk@0.0.8

jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: run gradle
          command: |
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            sed -i s/version=.*/version=$VERSION/ gradle.properties
            gradle build


      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

      - run:
          name: mkdir for artifact
          command: |
            mkdir artifacts
            cp build/libs/snapshot-sender-*.jar ./artifacts/

      - persist_to_workspace:
          root: artifacts
          paths:
            - snapshot-sender-*.jar

  integration-test:
    docker:
      - image: circleci/python:3.7.3
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false

      - run:
          name: "Run the integration test"
          command: |
            sudo pip3 install docker-compose
            sudo apt-get update
            sudo apt-get install openjdk-8-jdk
            sudo apt-get install make

            cd resources
            ./generate-developer-certs.sh
            cd -

            make build-jar
            docker-compose build
            make up
            make integration-tests

  snyk-pr:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - snyk/scan:
          organization: dwp-dataworks
          severity-threshold: high
          target-file: build.gradle.kts
          project: '${CIRCLE_PROJECT_REPONAME}/pr-kotlin'

  snyk-master:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - snyk/scan:
          organization: dwp-dataworks
          severity-threshold: high
          target-file: build.gradle.kts
          project: '${CIRCLE_PROJECT_REPONAME}/master-kotlin'


  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            set -u
            set -o pipefail
            ls -l ./artifacts
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} -delete \
              ${VERSION} ./artifacts/

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - snyk-pr:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - snyk-master:
          requires:
            - build
          filters:
            branches:
              only: master
      - integration-test:
          requires:
            - build
      - publish-github-release:
          requires:
            - build
          filters:
            branches:
              only: master
